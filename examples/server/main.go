package main

import (
	"log"     // Para registro de logs
	"net"     // Para opera√ß√µes de rede TCP
	"net/rpc" // Para implementa√ß√£o do servidor RPC
)

// Args define a estrutura dos par√¢metros de entrada das opera√ß√µes
type Args struct {
	A, B int // Operandos para as opera√ß√µes matem√°ticas
}

// Reply define a estrutura da resposta das opera√ß√µes
type Reply struct {
	Result int // Resultado da opera√ß√£o solicitada
}

// Arithmetic √© a estrutura que implementa os m√©todos RPC
type Arithmetic struct{}

// Multiply implementa a opera√ß√£o de multiplica√ß√£o via RPC
// M√©todo exportado deve ser em mai√∫sculo e seguir a assinatura:
// func (t *T) MethodName(args *ArgType, reply *ReplyType) error
func (t *Arithmetic) Multiply(args *Args, reply *Reply) error {
	log.Printf("Recebida requisi√ß√£o: %d * %d", args.A, args.B)
	reply.Result = args.A * args.B
	return nil
}

func main() {
	// 1. Cria√ß√£o e registro do servi√ßo RPC
	arithService := new(Arithmetic)

	// Registra explicitamente o servi√ßo com o nome "Arithmetic"
	// Isso evita problemas de namespace e torna as chamadas mais precisas
	err := rpc.RegisterName("Arithmetic", arithService)
	if err != nil {
		log.Fatal("Falha ao registrar o servi√ßo RPC:", err)
	}

	// 2. Configura√ß√£o do listener TCP
	// Usamos 127.0.0.1 explicitamente para for√ßar IPv4
	listener, err := net.Listen("tcp", "127.0.0.1:1234")
	if err != nil {
		log.Fatal("Erro ao iniciar listener:", err)
	}
	defer func(listener net.Listener) {
		err := listener.Close()
		if err != nil {
			log.Printf("‚ö†Ô∏è Erro ao fechar listener: %v", err)
		}
	}(listener) // Garante o fechamento adequado ao final

	log.Println("‚úÖ Servidor RPC iniciado em 127.0.0.1:1234")

	// 3. Loop principal de aceita√ß√£o de conex√µes
	for {
		conn, err := listener.Accept()
		if err != nil {
			// Loga o erro mas mant√©m o servidor rodando
			log.Printf("‚ö†Ô∏è Erro na conex√£o: %v", err)
			continue
		}

		// 4. Tratamento concorrente da conex√£o
		go func(conn net.Conn) {
			defer func(conn net.Conn) {
				err := conn.Close()
				if err != nil {
					log.Printf("‚ö†Ô∏è Erro ao fechar conex√£o: %v", err)
				}
			}(conn) // Garante fechamento da conex√£o
			log.Printf("üîå Nova conex√£o de %s", conn.RemoteAddr())

			// Serve a conex√£o usando o pacote RPC
			rpc.ServeConn(conn)
		}(conn)
	}
}
