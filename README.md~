# GoRPCStress üöÄ

Uma biblioteca profissional para testes de estresse em endpoints RPC escritos em Go, com m√©tricas detalhadas e alto desempenho.

## Recursos Principais

- ‚úÖ Teste de carga com controle de concorr√™ncia
- ‚úÖ Coleta detalhada de m√©tricas de performance
- ‚úÖ C√°lculo de percentis (p50, p90, p99)
- ‚úÖ Medi√ß√£o de throughput (RPS/RPM)
- ‚úÖ Relat√≥rio completo em tempo real
- ‚úÖ Configura√ß√£o flex√≠vel via linha de comando
- ‚úÖ Tratamento robusto de erros e reconex√£o autom√°tica
- ‚úÖ Conex√µes RPC otimizadas e pool de clientes
- ‚úÖ Valida√ß√£o autom√°tica de respostas
- ‚úÖ Suporte a diferentes tipos de payloads

## Instala√ß√£o

```bash
# Instala√ß√£o global
go install github.com/denner-s/gorpcstress@latest

# Ou usando como m√≥dulo
go mod init seu-projeto
go get github.com/denner-s/gorpcstress
```

## Uso B√°sico

```bash
gorpcstress \
  -server=localhost:1234 \
  -requests=5000 \
  -concurrency=100 \
  -method=Service.Method
```

## Exemplo Completo

**Servidor de Teste (server.go):**
```go
package main

import (
	"net"
	"net/rpc"
)

type Calculator struct{}

func (c *Calculator) Multiply(args *struct{A, B int}, reply *int) error {
	*reply = args.A * args.B
	return nil
}

func main() {
	rpc.Register(new(Calculator))
	listener, _ := net.Listen("tcp", ":1234")
	rpc.Accept(listener)
}
```

**Executando o Teste:**
```bash
./bin/gorpcstress -server=localhost:1234 \
  -requests=5000 \
  -concurrency=100 \
  -method=Calculator.Multiply
```
ou
```bash
./bin/gorpcstress   -server=localhost:1234   -method=Calculator.Multiply   -requests=1000   -concurrency=50   -timeout=5s
```

## Op√ß√µes de Configura√ß√£o

| Flag           | Descri√ß√£o                          | Padr√£o               |
|----------------|------------------------------------|----------------------|
| `-server`      | Endere√ßo do servidor RPC           | localhost:1234       |
| `-requests`    | N√∫mero total de requisi√ß√µes        | 1000                 |
| `-concurrency` | N√∫mero de workers concorrentes     | 50                   |
| `-method`      | M√©todo RPC a ser testado           | Arithmetic.Multiply  |
| `-timeout`     | Timeout por requisi√ß√£o (opcional)  | 10s                  |

## Exemplo de Sa√≠da

```text
=== Relat√≥rio do Teste de Estresse ===

Tempo total de execu√ß√£o:      2.45s
Requisi√ß√µes totais:           5000
Requisi√ß√µes com erro:         23 (0.46%)
  ‚Ä¢ 10 erros de conex√£o
  ‚Ä¢ 5 timeouts
  ‚Ä¢ 8 respostas inv√°lidas

Throughput:
Requests por segundo (RPS):   2040.82
Requests por minuto (RPM):    122449.22

Lat√™ncia (microssegundos):
M√©dia:        1.2ms
Min:          0.8ms
Max:          15.4ms
p50 (mediana): 1.1ms
p90:          1.5ms
p99:          3.8ms
```

## Uso Avan√ßado

**Teste com Payload Customizado:**
1. Modifique as structs no arquivo `pkg/rpcclient/client.go`:
```go
type Args struct {
	X int `json:"x"`
	Y int `json:"y"`
}

type Reply struct {
	Total int `json:"total"`
}
```

2. Execute com:
```bash
gorpcstress -method=Calculator.Sum -requests=2000 -concurrency=75
```

**Teste de Dura√ß√£o:**
```bash
# Executar por 5 minutos
gorpcstress -concurrency=100 -duration=5m
```

## Solu√ß√£o de Problemas Comuns

**Erro: "Too many open files"**
```bash
# Aumente o limite de arquivos
ulimit -n 10000
```

**Erro: "Connection refused"**
```bash
# Verifique se o servidor est√° aceitando conex√µes
telnet localhost 1234

# Verifique firewalls
sudo ufw allow 1234/tcp
```

## Funcionalidades Futuras (Roadmap)

- [ ] Suporte a HTTP/gRPC
- [x] Modo de teste por dura√ß√£o
- [ ] Relat√≥rios em JSON/CSV
- [x] Valida√ß√£o de respostas
- [ ] Monitoramento de recursos do sistema
- [ ] Carga din√¢mica com ramp-up
- [ ] Teste distribu√≠do em m√∫ltiplos n√≥s
- [ ] Gera√ß√£o de gr√°ficos de performance
- [ ] Suporte a payloads customizados

## Contribui√ß√£o

Siga estes passos para contribuir:

1. Fork o reposit√≥rio
2. Crie um branch descritivo (`git checkout -b feature/nova-funcionalidade`)
3. Commit suas mudan√ßas (`git commit -am 'Adiciona incr√≠vel funcionalidade'`)
4. Push para o branch (`git push origin feature/nova-funcionalidade`)
5. Abra um Pull Request com detalhes das mudan√ßas

**Requisitos para contribui√ß√£o:**
- Documenta√ß√£o atualizada
- C√≥digo seguindo as diretrizes do [Effective Go](https://go.dev/doc/effective_go)

## Licen√ßa

Distribu√≠do sob a licen√ßa MIT. Veja [LICENSE](LICENSE) para mais informa√ß√µes.

---

**Aviso Importante:**  
‚ö†Ô∏è Use com cuidado em ambientes de produ√ß√£o  
‚ö†Ô∏è Monitore o servidor alvo durante os testes  
‚ö†Ô∏è Configure timeouts adequados para suas necessidades  
‚ö†Ô∏è N√£o utilize em sistemas cr√≠ticos sem autoriza√ß√£o

**Dica profissional:**  
Para melhores resultados, execute primeiro um teste de aquecimento com 10% da carga total antes do teste principal.
